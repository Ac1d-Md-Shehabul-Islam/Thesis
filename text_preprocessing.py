# -*- coding: utf-8 -*-
"""Text preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lifwGhf66NlBGhczAJhMAgqYLSDRTnWM
"""

pip install ijson

import ijson
import pandas as pd
import numpy as np
from collections import Counter
import random

from nltk.corpus import stopwords
from wordcloud import WordCloud, STOPWORDS
import spacy

import nltk
nltk.download('stopwords')

nlp = spacy.load('en', disable=['parser', 'ner'])

def check(val):
  return (val=='depression' or val=='ptsd' or val=='schizophrenia' or val=='bipolar') # or val == 'control'

import re

TAG_RE = re.compile(r'<[^>]+>')

def remove_tags(text):
  return TAG_RE.sub('', text)

def remove_emoji(text):
    emoji_pattern = re.compile("["
                           u"\U0001F600-\U0001F64F"  # emoticons
                           u"\U0001F300-\U0001F5FF"  # symbols & pictographs
                           u"\U0001F680-\U0001F6FF"  # transport & map symbols
                           u"\U0001F1E0-\U0001F1FF"  # flags 
                           u"\U00002702-\U000027B0"
                           u"\U000024C2-\U0001F251"
                           "]+", flags=re.UNICODE)
    return emoji_pattern.sub(r'', text)

def stop_words_removal(text):
  stop = stopwords.words('english')
  return " ".join(x for x in text.split() if x not in stop)

stop_words_removal("i am an idoit, the fox jumps over the lazy brown dog")

from string import punctuation
my_punctuation = punctuation.replace("?", "")
my_punctuation

"It's right, isn't it?".translate(str.maketrans("", "", my_punctuation))

def preprocess_text(sen):
  sen = sen.lower()
  # Removing html tags
  sentence = remove_tags(sen)

  #removing emoji
  sentence = remove_emoji(sentence)

  #removing numbers
  sentence = re.sub(r'\d+', "", sentence)

  #removing links
  sentence = re.sub(r'https?://\S+', '', sentence)

  # Remove punctuations
  sentence = re.sub(r'[^\w\s]', '', sentence)

  # Single character removal
  sentence = re.sub(r"\s+[a-zA-Z]\s+", ' ', sentence)

  # Removing multiple spaces
  sentence = re.sub(r'\s+', ' ', sentence)

  return sentence

preprocess_text("‚ù§ hello there üòö üòö wAAAAAssup he i'm 5 years old the an i am fine!!!! @\/??&*^$ %@~!" )

from google.colab import drive
drive.mount('/content/drive')

posts=[]
labels=[]
control_counter = 0

with open("/content/drive/MyDrive/Thesis Papers/SMHD/train.jl", "rb") as f:
  for line in f:

    item = ijson.items(line,'posts.item.text',multiple_values=True)
    label = ijson.items(line,'label.item',multiple_values=True)
    s=""

    for f,val in enumerate(label):

      if (val == 'control' and control_counter < 3800):
          control_counter +=1
          labels.append(val)
          for i in item:
            s=s+preprocess_text(i)+" "
          posts.append(s)
      else:
        if (check(val)):
          labels.append(val)

          if f > 0 and s!="":
            posts.append(s)

          else:
            for i in item:
              s=s+preprocess_text(i)+" "

            posts.append(s)

    # c = c+1

len(labels)

len(posts)

Counter(labels)

control_counter = 0
with open("/content/drive/MyDrive/Thesis Papers/SMHD/test.jl", "rb") as f:
  for line in f:

    item = ijson.items(line,'posts.item.text',multiple_values=True)
    label = ijson.items(line,'label.item',multiple_values=True)
    s=""

    for f,val in enumerate(label):

      if (val == 'control' and control_counter < 3800):
          control_counter +=1
          labels.append(val)
          for i in item:
            s=s+preprocess_text(i)+" "
          posts.append(s)
      else:
        if (check(val)):
          labels.append(val)

          if f > 0 and s!="":
            posts.append(s)

          else:
            for i in item:
              s=s+preprocess_text(i)+" "

            posts.append(s)

Counter(labels)

control_counter = 0
with open("/content/drive/MyDrive/Thesis Papers/SMHD/dev.jl", "rb") as f:
  for line in f:

    item = ijson.items(line,'posts.item.text',multiple_values=True)
    label = ijson.items(line,'label.item',multiple_values=True)
    s=""

    for f,val in enumerate(label):

      if (val == 'control' and control_counter < 3800):
          control_counter +=1
          labels.append(val)
          for i in item:
            s=s+preprocess_text(i)+" "
          posts.append(s)
      else:
        if (check(val)):
          labels.append(val)

          if f > 0 and s!="":
            posts.append(s)

          else:
            for i in item:
              s=s+preprocess_text(i)+" "

            posts.append(s)

Counter(labels)

control_counter = 0
with open("/content/drive/MyDrive/Thesis Papers/SMHD/lt9controls.jl", "rb") as f:
  for line in f:

    item = ijson.items(line,'posts.item.text',multiple_values=True)
    label = ijson.items(line,'label.item',multiple_values=True)
    s=""

    for f,val in enumerate(label):

      if (val == 'control' and control_counter < 3802):
          control_counter +=1
          labels.append(val)
          for i in item:
            s=s+preprocess_text(i)+" "
          posts.append(s)
      else:
        if (check(val)):
          labels.append(val)

          if f > 0 and s!="":
            posts.append(s)

          else:
            for i in item:
              s=s+preprocess_text(i)+" "

            posts.append(s)

Counter(labels)

control_counter = 0
control_passed = 0
with open("/content/drive/MyDrive/Thesis Papers/SMHD/dev.jl", "rb") as f:
  for line in f:

    item = ijson.items(line,'posts.item.text',multiple_values=True)
    label = ijson.items(line,'label.item',multiple_values=True)
    s=""

    for f,val in enumerate(label):
      if(val == "control" and control_passed < 3800):
        control_passed += 1
        continue

      if (val == 'control' and control_counter < 1267):
          control_counter +=1
          labels.append(val)
          for i in item:
            s=s+preprocess_text(i)+" "
          posts.append(s)
      if(control_counter >= 1267):
        break

Counter(labels)

control_counter = 0
control_passed = 0
with open("/content/drive/MyDrive/Thesis Papers/SMHD/train.jl", "rb") as f:
  for line in f:
    if(control_counter >= 1267):
      break

    item = ijson.items(line,'posts.item.text',multiple_values=True)
    label = ijson.items(line,'label.item',multiple_values=True)
    s=""

    for f,val in enumerate(label):
      if(val == "control" and control_passed < 3800):
        control_passed += 1
        continue

      if (val == 'control' and control_counter < 1267):
          control_counter +=1
          labels.append(val)
          for i in item:
            s=s+preprocess_text(i)+" "
          posts.append(s)

Counter(labels)

control_counter = 0
control_passed = 0
with open("/content/drive/MyDrive/Thesis Papers/SMHD/test.jl", "rb") as f:
  for line in f:
    if(control_counter >= 1268):
      break

    item = ijson.items(line,'posts.item.text',multiple_values=True)
    label = ijson.items(line,'label.item',multiple_values=True)
    s=""

    for f,val in enumerate(label):
      if(val == "control" and control_passed < 3800):
        control_passed += 1
        continue

      if (val == 'control' and control_counter < 1268):
          control_counter +=1
          labels.append(val)
          for i in item:
            s=s+preprocess_text(i)+" "
          posts.append(s)

len(labels)

len(posts)

df = pd.DataFrame({"Posts": posts, "Label": labels})

df.to_csv('/content/drive/MyDrive/Thesis Papers/SMHD/final_cleaned_data2.csv', index=False)

import pandas as pd

labels = ['control','control', 'bipolar', 'ptsd', 'depression', 'schizophrenia', 'depression', 'ptsd', 'bipolar', 'bilpoar','control']
posts = ['Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodoconsequat. Duis aute irure dolor in reprehenderit in voluptate velit esse']
for i in range(10):
  posts.append(posts[0])
print(len(labels),len(posts))

df = pd.DataFrame({"Label": labels, "Posts": posts})

df.head(11)

